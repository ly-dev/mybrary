<?php
/**
 * Transaction status constant
 */
define("MYBRARY_TRANSACTION_STATUS_UNKNOWN", 0);
define("MYBRARY_TRANSACTION_STATUS_REQUESTED", 1);
define("MYBRARY_TRANSACTION_STATUS_CONFIRMED", 2);
define("MYBRARY_TRANSACTION_STATUS_DECLINED", 3);
define("MYBRARY_TRANSACTION_STATUS_RECEIVED", 4);
define("MYBRARY_TRANSACTION_STATUS_RETURNED", 5);
define("MYBRARY_TRANSACTION_STATUS_CANCELLED", 6);
define("MYBRARY_TRANSACTION_STATUS_OWNER_FEEDBACKED", 7);
define("MYBRARY_TRANSACTION_STATUS_BORROWER_FEEDBACKED", 8);
define("MYBRARY_TRANSACTION_STATUS_REQUEST_CHANGED", 9);
define("MYBRARY_TRANSACTION_STATUS_CLOSED", 10);

define("MYBRARY_TRANSACTION_FEEDBACK_UNKNOWN", 0);
define("MYBRARY_TRANSACTION_FEEDBACK_NEGATIVE", 1);
define("MYBRARY_TRANSACTION_FEEDBACK_NEUTRAL", 2);
define("MYBRARY_TRANSACTION_FEEDBACK_POSITIVE", 3);

function _mybrary_transaction_get_status_label ($key) {
    $labels = array(
            MYBRARY_TRANSACTION_STATUS_UNKNOWN => t('unknown'),
            MYBRARY_TRANSACTION_STATUS_REQUESTED => t('requested'),
            MYBRARY_TRANSACTION_STATUS_CONFIRMED => t('confirmed'),
            MYBRARY_TRANSACTION_STATUS_DECLINED => t('declined'),
            MYBRARY_TRANSACTION_STATUS_RECEIVED => t('received'),
            MYBRARY_TRANSACTION_STATUS_RETURNED => t('returned'),
            MYBRARY_TRANSACTION_STATUS_CANCELLED => t('cancelled'),
            MYBRARY_TRANSACTION_STATUS_OWNER_FEEDBACKED => t('owner feedbacked'),
            MYBRARY_TRANSACTION_STATUS_BORROWER_FEEDBACKED => t('borrower feedbacked'),
            MYBRARY_TRANSACTION_STATUS_REQUEST_CHANGED => t('request changed'),
            MYBRARY_TRANSACTION_STATUS_CLOSED => t('closed'),
    );
    
    if (array_key_exists($key, $labels)) {
        return $labels[$key];
    } else {
        return t('Unknown transaction status label for key: !key', array('!key' => $key));
    }
}

function _mybrary_transaction_get_feedback_label ($key) {
    $labels = array(
            MYBRARY_TRANSACTION_FEEDBACK_UNKNOWN => t('unknown'),
            MYBRARY_TRANSACTION_FEEDBACK_NEGATIVE => t('negative'),
            MYBRARY_TRANSACTION_FEEDBACK_NEUTRAL => t('neutral'),
            MYBRARY_TRANSACTION_FEEDBACK_POSITIVE => t('positive'),
    );

    if (array_key_exists($key, $labels)) {
        return $labels[$key];
    } else {
        return t('Unknown feedback label for key: !key', array('!key' => $key));
    }
}

function _mybrary_transaction_get_not_available_periods ($nid) {
    $result = array();
    
    // tricky to get transaction with latest status
    //@TODO filter with TODAY
    $queryStatement = 'select th.transaction_id, th.start, th.end, ti.status'
     . ' from (select * from mybrary_transaction_items'
     . ' where transaction_id in (select transaction_id from mybrary_transaction_head where entity_id = :nid)'
     . ' order by transaction_id, update_timestamp desc) ti'
     . ' join mybrary_transaction_head th on th.transaction_id = ti.transaction_id'
     . ' group by ti.transaction_id'
     . ' having status = :status';
    
    $dbResult = db_query($queryStatement, array(
            ':nid' => $nid,
            ':status' => MYBRARY_TRANSACTION_STATUS_CONFIRMED
    ));
    
    while ($row = $dbResult->fetchAssoc()) {
        $result[] = array(
            'transaction_id' => $row['transaction_id'],
            'start' => $row['start'],
            'end' => $row['end']   
        );
    }
    
    return $result;
}

function _mybrary_transaction_is_available ($nid, $start, $end) {
    $result = TRUE;

    // tricky to get transaction with latest status
    $queryStatement = 'select th.transaction_id, th.start, th.end, ti.status'
            . ' from (select * from mybrary_transaction_items'
            . ' where transaction_id in (select transaction_id from mybrary_transaction_head where entity_id = :nid)'
            . ' order by transaction_id, update_timestamp desc) ti'
            . ' join mybrary_transaction_head th on th.transaction_id = ti.transaction_id'
            . ' group by ti.transaction_id'
            . ' having status = :status and end >= :start and start <= :end';

    $dbResult = db_query($queryStatement, array(
            ':nid' => $nid,
            ':status' => MYBRARY_TRANSACTION_STATUS_CONFIRMED,
            ':start' => $start,
            ':end' => $end
    ));

    // should only max one found
    while ($row = $dbResult->fetchAssoc()) {
        $result = FALSE;
    }

    return $result;
}